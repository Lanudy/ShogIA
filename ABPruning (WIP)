
import shogi_engine
import copy

piecesValue =  {'p' : 10,'l' : 43,'n' : 45,'s' : 64,'g' : 69,'b' : 89,'r' : 104, 'k' : 0}
piecesValueC =  {'p' : 12,'l' : 48,'n' : 51,'s' : 72,'g' : 78,'b' : 111,'r' : 127}
piecesValueP =  {'p' : 42,'l' : 63,'n' : 64,'s' : 67,'b' : 115,'r' : 130}

class Node:
    
    def __init__(self,gs,p = 0, d = 0, pm = ''):
        
        self.gameState = gs
        self.parent = p
        self.depth = d
        self.prior = pm
        self.sons = []
        self.value = 0
        self.computeValue()
        
    def generate_sons(self):
        
        self.moves = self.gameState.legal_moves
        for i in self.moves:
            temp_gameState = copy.deepcopy(self.gameState)
            temp_gameState.update(i)
            self.sons.append((Node(temp_gameState,self,self.depth + 1, i)))
            
    def computeValue(self):
        
        for i in self.gameState.es_pieces['w']:
            piece = self.gameState.es_pieces['w'][i]
            if piece.captured:
                self.value+= piecesValueC[(piece.usi_name[-1])]
            elif piece.promotion == '+':
                self.value+= piecesValueP[(piece.usi_name[-1])]
            else:
                self.value+= piecesValue[(piece.usi_name[-1])]
        for i in self.gameState.es_pieces['b']:
            piece = self.gameState.es_pieces['b'][i]
            if piece.captured:
                self.value-= piecesValueC[(piece.usi_name[-1].lower())]
            elif piece.promotion == '+':
                self.value-= piecesValueP[(piece.usi_name[-1].lower())]
            else:
                self.value-= piecesValue[(piece.usi_name[-1].lower())]
        self.value *= -1
        #Invert value according to which side the AI is playing on
        
        
#In the following function, we replace -inf and +inf by 1000, because the values 
#of game states will never go above those thresholds
    
def alphaBetaPruning(Node, depth, alpha = -10000, beta = 10000, maximizingPlayer = True):
    
    if depth == 0 or Node.gameState.finished():
        return (Node.value,[])
    
    Node.generate_sons()
    
    if maximizingPlayer:    
        v = -10000
        for son in Node.sons:
            (v2,mvl) = alphaBetaPruning(son, depth - 1, alpha, beta, False)
            if v < v2:
                v = v2
                move = son.prior
                movelist = mvl
            alpha = max(alpha,v)
            if alpha >= beta:
                break
        return (v,[move] + movelist)
        
    else:
        v = 10000
        for son in Node.sons:
            (v3,mvl) = alphaBetaPruning(son, depth - 1, alpha, beta, True)
            
            if v3 < v:
                v = v3
                move = son.prior
                movelist = mvl
            beta = min(beta,v)
            if alpha >= beta:
                break
        return (v,movelist + [move])
        
        
test = Node(shogi_engine.Game_state())
(gain,movelist) = alphaBetaPruning(test,3)
